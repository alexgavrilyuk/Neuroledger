// backend/src/features/prompts/prompt.model.js
// ** UPDATED FILE - Add fields for code generation/execution **
const mongoose = require('mongoose');

const PromptHistorySchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true,
  },
  promptText: {
    type: String,
    required: true,
  },
  selectedDatasetIds: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Dataset',
  }],
  contextSent: {
      type: String,
  },
  // --- Phase 5 Fields ---
  aiGeneratedCode: { // Store the React code string generated by Claude
      type: String,
  },
  aiResponseText: { // Can still store text if code generation fails or for hybrid responses
      type: String,
  },
  executionResult: { // Store the output from the code execution sandbox (e.g., HTML string)
      type: String // Storing HTML as string for now
      // Or use mongoose.Schema.Types.Mixed for more complex JSON structure later
  },
  status: { // More granular status for Phase 5
    type: String,
    enum: ['pending', 'generating_code', 'generating_text', 'execution_pending', 'executing_code', 'completed', 'error_generating', 'error_executing'],
    default: 'pending',
  },
  // --- End Phase 5 Fields ---
  errorMessage: {
      type: String
  },
  durationMs: {
      type: Number
  },
  claudeModelUsed: {
      type: String
  },
  createdAt: {
    type: Date,
    default: Date.now,
  }
});

module.exports = mongoose.model('PromptHistory', PromptHistorySchema);